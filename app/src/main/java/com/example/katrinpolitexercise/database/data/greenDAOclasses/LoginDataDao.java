package com.example.katrinpolitexercise.database.data.greenDAOclasses;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UserTable".
*/
public class LoginDataDao extends AbstractDao<LoginData, String> {

    public static final String TABLENAME = "UserTable";

    /**
     * Properties of entity LoginData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Email = new Property(0, String.class, "Email", true, "EMAIL");
        public final static Property Pass = new Property(1, String.class, "pass", false, "PASS");
    }

    private DaoSession daoSession;


    public LoginDataDao(DaoConfig config) {
        super(config);
    }
    
    public LoginDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UserTable\" (" + //
                "\"EMAIL\" TEXT PRIMARY KEY NOT NULL ," + // 0: Email
                "\"PASS\" TEXT NOT NULL );"); // 1: pass
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UserTable\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginData entity) {
        stmt.clearBindings();
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(1, Email);
        }
        stmt.bindString(2, entity.getPass());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginData entity) {
        stmt.clearBindings();
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(1, Email);
        }
        stmt.bindString(2, entity.getPass());
    }

    @Override
    protected final void attachEntity(LoginData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LoginData readEntity(Cursor cursor, int offset) {
        LoginData entity = new LoginData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Email
            cursor.getString(offset + 1) // pass
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginData entity, int offset) {
        entity.setEmail(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPass(cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LoginData entity, long rowId) {
        return entity.getEmail();
    }
    
    @Override
    public String getKey(LoginData entity) {
        if(entity != null) {
            return entity.getEmail();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginData entity) {
        return entity.getEmail() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
